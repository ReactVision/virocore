apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 34
    namespace "com.example.virosample"
    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        applicationId "com.example.virosample"
        minSdkVersion 24
        targetSdkVersion 34

        // versionCode getGitCommitCount()
        // versionName getTag()
        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
        buildConfigField "String", 'VERSION', "\"" + versionName + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    packagingOptions {
        exclude "META-INF/*.kotlin_module"
    }

    flavorDimensions "source"
    productFlavors {
        aar {
            dimension "source"
        }
        code {
            dimension "source"
        }
    }

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation project(':code-samples:ARBlackPanther')
    implementation project(':code-samples:ARHelloWorldAndroid')
    implementation project(':code-samples:ARPlacingObjects')
    implementation project(':code-samples:ARRetail')
    implementation project(':code-samples:ARTesla')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.0"
    implementation "androidx.core:core-ktx:1.8.0"
}

static def getTag() {
    def tagVersion = "$System.env.TAG_VERSION"
    if (tagVersion == "null") {
        println "No variable TAG_VERSION specified, I'm using 'git describe --abbrev=0'"
        def process = "git describe --abbrev=0".execute()
        tagVersion = process.text.toString().trim()
        if (tagVersion.equals("")) {
            println "abbrev failed, I'm using 'git --tags'"
            def processT = "git describe --tags".execute()
            tagVersion = processT.text.toString().trim()
        }
    }
    return tagVersion
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
