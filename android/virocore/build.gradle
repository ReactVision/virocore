apply plugin: 'com.android.library'
apply from: 'preprocessor.gradle'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 33
    namespace "com.viro.virocore"
    buildFeatures {
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
        ndkVersion = "25.2.9519653"

        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }

        externalNativeBuild {
            cmake {
                targets "viro_renderer"
                cppFlags "-std=c++14 -frtti -fexceptions"
            }
        }

        // Used to differentiate virocore from viroreact in code
        buildConfigField "String", "VIRO_PLATFORM", "\"VIRO_CORE\""
        buildConfigField "String", "VIRO_VERSION", "\"" + getVersion() + "\""
    }

    sourceSets {
        main {
            // Use the /sharedCode directory for the source, resources, and assets
            java.srcDirs = ['../sharedCode/src/main/java']
            res.srcDirs = ['../sharedCode/src/main/res']
            assets.srcDirs = ['../sharedCode/src/main/assets']

            // Package both the /sharedCode jniLibs viroar's build/natives libs into the AAR
            jniLibs.srcDirs = ['../sharedCode/src/main/jniLibs', '../viroar/build/natives/jni']
            manifest.srcFile '../sharedCode/src/main/AndroidManifest.xml'
        }
    }

    externalNativeBuild {
        cmake {
            path "../sharedCode/CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

    packagingOptions {
        // x86 is currently not supported, so do not copy over these resources
        exclude '**/x86/**'

        pickFirst 'lib/armeabi-v7a/libBulletDynamics.so'
        pickFirst 'lib/armeabi-v7a/libgvr.so'
        pickFirst 'lib/armeabi-v7a/libgvr_audio.so'
        pickFirst 'lib/armeabi-v7a/libfreetyped.so'
        pickFirst 'lib/armeabi-v7a/libBulletCollision.so'
        pickFirst 'lib/armeabi-v7a/libLinearMath.so'
        pickFirst 'lib/armeabi-v7a/libvrapi.so'
        pickFirst 'lib/armeabi-v7a/libBulletSoftBody.so'
        pickFirst 'lib/arm64-v8a/libBulletDynamics.so'
        pickFirst 'lib/arm64-v8a/libgvr.so'
        pickFirst 'lib/arm64-v8a/libgvr_audio.so'
        pickFirst 'lib/arm64-v8a/libfreetyped.so'
        pickFirst 'lib/arm64-v8a/libBulletCollision.so'
        pickFirst 'lib/arm64-v8a/libLinearMath.so'
        pickFirst 'lib/arm64-v8a/libvrapi.so'
        pickFirst 'lib/arm64-v8a/libBulletSoftBody.so'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:1.0.0"
    implementation 'androidx.media3:media3-exoplayer:1.1.1'
    implementation 'androidx.media3:media3-exoplayer-dash:1.1.1'
    implementation 'androidx.media3:media3-exoplayer-hls:1.1.1'
    implementation 'androidx.media3:media3-exoplayer-smoothstreaming:1.4.1'
    api project(':libs:gvr')
    implementation 'com.google.ar:core:1.45.0'
    //implementation project(path: ':sharedCode')
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
}

// We have to add dependencies to Android tasks in this deferred way because these tasks
// are dynamically generated.
//
// Before assembling release, implementation :viroar:assembleRelease, which will place its .so
// products in its build/natives folder. The jniLibs source set above will ensure these
// .so files are included in our final AAR.
tasks.whenTaskAdded {
    task ->
        if (task.name.contains("external") && !task.name.contains("Clean")) {
            task.dependsOn ':viroar:assembleRelease'
        }
}

// project.afterEvaluate {
//     publishing {
//         publications {
//             release(MavenPublication) {
//                 from components.release
//                 pom {
//                     name = "viroCore"
//                     description = "Community viroCore"
//                     url = "https://github.com/ViroCommunity/virocore"
//                     licenses {
//                         license {
//                             name = "MIT License"
//                             url = "https://github.com/ViroCommunity/virocore/blob/main/LICENSE"
//                         }
//                     }
//                     // TODO This fixes missing gvr dependency with Gradle 6.x but for Gradle 7.x it needs an other solution
//                     // configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
//                     // configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
//                 }
//             }
//         }
//     }
// }
